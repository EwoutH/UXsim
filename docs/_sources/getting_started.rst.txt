
Getting started
===============

Install
-------

First, install UXsim package using pip::

   pip install uxsim

or download the uxsim directory from `Github repo <https://github.com/toruseo/UXsim>`_ and place it to your local directory.
The former is required if you want to customize UXsim's internal logic.

Then import the module using::

   from uxsim import *

Test scenario
-------------

The following code can be used to test UXsim in simple setting::

	from uxsim import *
	import pandas as pd

	if __name__ == "__main__":

	    # Define the main simulation
	    # Units are standardized to seconds (s) and meters (m)
	    W = World(
	        name="",    # Scenario name. Can be blank. Used as the folder name for saving results.
	        deltan=5,   # Simulation aggregation unit ƒ¢n. Defines how many vehicles are grouped together (i.e., platoon size) for computation. Computation cost is generally inversely proportional to deltan^2.
	        tmax=1200,  # Total simulation time (s)
	        print_mode=1, save_mode=1, show_mode=0,    # Various options. print_mode determines whether to print information. Usually set to 1, but recommended 0 when running multiple simulations automatically. save_mode determines if visualization results are saved. show_mode determines if visualization results are displayed. It's good to set show_mode=1 on Jupyter Notebook, otherwise recommended 0.
	        random_seed=0    # Set the random seed. Specify if you want repeatable experiments. If not, set to None. On Jupyter Notebook, randomness might not always be consistent (requires a fix).
	    )
	    
	    # Define the scenario
	    # Merge network: Example of hard-coded definition
	    W.addNode("orig1", 0, 0) # Create a node. Parameters: node name, visualization x-coordinate, visualization y-coordinate
	    node_orig2 = W.addNode("orig2", 0, 2) # W.addNode returns the created node instance, so it can be assigned to a variable
	    W.addNode("merge", 1, 1)
	    W.addNode("dest", 2, 1)
	    W.addLink("link1", "orig1", "merge", length=1000, free_flow_speed=20, jam_density=0.2, merge_priority=0.5) # Create a link. Parameters: link name, start node, end node, length, free_flow_speed, jam_density, merge_priority during merging
	    W.addLink("link2", node_orig2, "merge", length=1000, free_flow_speed=20, jam_density=0.2, merge_priority=2) # Nodes can be specified using the variable name instead of the string name
	    link3 = W.addLink("link3", "merge", "dest", length=1000, free_flow_speed=20, jam_density=0.2) # W.addLink also returns the created link instance
	    W.adddemand("orig1", "dest", 0, 1000, 0.4) # Create OD traffic demand. Parameters: origin node, destination node, start time, end time, demand flow rate
	    W.adddemand("orig2", "dest", 500, 1000, 0.6)
	    
	    # Execute the simulation
	    # Run the simulation to the end
	    W.exec_simulation()
	    
	    # Visualization of results: Some methods are very slow. Not necessary for the simulation functionality, so can be omitted.
	    W.analyzer.print_simple_stats()

It simulates traffic flow in Y-shaped simple network.
It will output simple statistics of the simulation results as follows (the details may vary depending on the environment):

.. code-block:: node

	simulation setting:
	 scenario name: 
	 simulation duration:    1200 s
	 number of vehicles:     700 veh
	 total road length:      3000 m
	 time discret. width:    5 s
	 platoon size:           5 veh
	 number of timesteps:    240
	 number of platoons:     140
	 number of links:        3
	 number of nodes:        4
	 setup time:             0.12 s
	simulating...
	      time| # of vehicles| ave speed | computation time
	       0 s|        0 vehs|   0.0 m/s |     0.00 s
	     600 s|      100 vehs|  17.5 m/s |     0.03 s
	    1195 s|       25 vehs|  20.0 m/s |     0.06 s
	 simulation finished
	results:
	 average speed:  13.8 m/s
	 number of completed trips:      675 / 700
	 average travel time of trips:   142.7 s
	 average delay of trips:         42.7 s
	 delay ratio:                    0.299

For further details, please see :doc:`notebooks/demo_notebook_01en` and `demos_and_examples <https://github.com/toruseo/UXsim/tree/main/demos_and_examples>`_ in Github repo.